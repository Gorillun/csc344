Script started on Tue Apr 22 11:29:06 2014
altair - kfosmire - 03 > script[K[K[K[K[K[Kexit.
exit.: Command not found.
altair - kfosmire - 03 > script partb.txt
Script started, file is partb.txt
altair - kfosmire - 03 > cat partb.pl
%Keith Fosmire
%Part B Prolog
%Incomplete
%

:- consult('process.p').


calculate(Value) -->pronoun(V1),digit(V2),[plus],digit(V3),{Value is V2+V3}.
calculate(Value) -->pronoun(V1),digit(V2),[minus],digit(V3),{Value is V2-V3}.
calculate(Value) -->pronoun(V1),digit(V2),[times],digit(V3),{Value is V2*V3}.
calculate(Value) -->pronoun(V1),digit(V2),[divided],[by],digit(V3),{Value is V2/V3}.


adverb(Value)-->[much],
determiner(V1),{Value is V1}.
adverb(37)-->[add].
pronoun(Value)-->[how],
adverb(V1), {Value is V1}.
pronoun(2)-->[what].
determiner(Value)-->[is].

digit(Value) --> [one],
zeros(V1),{Value is 1*V1}.
digit(Value)-->[two] ,
zeros(V1),{Value is 2*V1}.
digit(Value) --> [three],
zeros(V1),{Value is 3*V1}.
digit(Value) --> [four],
zeros(V1),{Value is 4*V1}.
digit(Value) --> [five],
zeros(V1),{Value is 5*V1}.
digit(Value) --> [six],
zeros(V1),{Value is 6*V1}.
digit(Value) --> [seven],
zeros(V1),{Value is 7*V1}.
digit(Value) --> [eight],
zeros(V1),{Value is 8*V1}.
digit(Value) --> [nine],
zeros(V1),{Value is 9*V1}.
digit(Value)-->[ten],
zeros(V1),{Value is 10*V1}.
digit(Value)-->[eleven],
zeros(V1),{Value is 11*V1}.
digit(Value)-->[twelve],
zeros(V1),{Value is 12*V1}.
digit(Value) --> [thirteen],
zeros(V1),{Value is 13*V1}.
digit(Value) --> [fourteen],
zeros(V1),{Value is 14*V1}.
digit(Value)-->[fifteen],
zeros(V1),{Value is 15*V1}.
digit(Value)-->[sixteen],
zeros(V1),{Value is 16*V1}.
digit(Value)-->[seventeen],
zeros(V1),{Value is 17*V1}.
digit(Value) --> [eighteen],
zeros(V1),{Value is 18*V1}.
digit(Value) --> [nineteen],
zeros(V1),{Value is 19*V1}.
digit(Value) -->[twenty],
sdigit(V1),{Value is 20+V1}.
digit(Value) --> [thirty],
sdigit(V1),{Value is  30 + V1}.
digit(Value) --> [forty],
sdigit(V1),{Value is 40 + V1}.
digit(Value) --> [fifty],
sdigit(V1),{Value is 50 + V1}.
digit(Value) --> [sixty],
sdigit(V1),{Value is 60 + V1}.
digit(Value) --> [seventy],
sdigit(V1),{Value is 70 + V1}.
digit(Value) --> [eighty],
sdigit(V1),{Value is 80 + V1}.
digit(Value) --> [ninety],
sdigit(V1),{Value is 90 + V1}.
sdigit(1) --> [one].
sdigit(2)-->[two] .
sdigit(3) --> [three].
sdigit(4) --> [four].
sdigit(5) --> [five].
sdigit(6) --> [six].
sdigit(7) --> [seven].
sdigit(8) --> [eight].
sdigit(9) --> [nine].
zeros(Value)-->[hundred],
{Value is 100}.
zeros(Value)-->[thousand],{Value is 1000}.
zeros(Value)-->[_],{Value is 1}.
altair - kfosmire - 03 > cat io.pl
% file: io.p
% predicates:

%    read_sentence/1
%    read_sentence_pc/1 -- preserve case of letters
%    write_sentence/1
%    space/0

%    read_string/1
%    write_string/1


%-------------------------------------------------------------
% read_sentence(-Sentence)
%-------------------------------------------------------------

read_sentence([FirstWord|RestOfSentence]) :-
  readSentence([FirstWord|RestOfSentence]).

readSentence([FirstWord|RestOfSentence]) :-
  get0(Char),
  readWord(Char,FirstWord,NextChar),
  readRestOfSentence(FirstWord,NextChar,RestOfSentence).

   %--- ancillaries to read_sentence -------------------------
   readRestOfSentence(Word,_,[]) :-
     endOfSentenceWord(Word),!.
   readRestOfSentence(_,Char,[NextWord|RestOfSentence]) :-
     readWord(Char,NextWord,NextChar),
     readRestOfSentence(NextWord,NextChar,RestOfSentence).

   readWord(Char,Word,NextChar) :-
     singleCharWord(Char),!,name(Word,[Char]),get0(NextChar).
   readWord(Char,Word,NextChar) :-
     componentChar(Char,NewChar),
     !,
     get0(TempNextChar),
     restWord(TempNextChar,RestWord,NextChar),
     name(Word,[NewChar|RestWord]).
   readWord(_,Word,NextChar) :-
     get0(TempChar),
     readWord(TempChar,Word,NextChar).

   restWord(Char,[NewChar|RestWord],NextChar) :-
     componentChar(Char,NewChar),
     !,
     get0(TempNextChar),
     restWord(TempNextChar,RestWord,NextChar).
     restWord(Char,[],Char).

   singleCharWord(44).  /* , */
   singleCharWord(59).  /* ; */
   singleCharWord(58).  /* : */
   singleCharWord(63).  /* ? */
   singleCharWord(33).  /* ! */
   singleCharWord(46).  /* . */

   componentChar(Char,Char) :- Char>96,Char<123.

   componentChar(Char,L) :- Char>64,Char<91,L is Char+32.

   componentChar(Char,L) :- Char>64,Char<91,L is Char+32.
   componentChar(Char,Char) :- Char>47,Char<58.
   componentChar(39,39).  /* ' */
   componentChar(45,45).  /* - */
   componentChar(95,95).  /* _ */

   endOfSentenceWord('.').
   endOfSentenceWord('!').
   endOfSentenceWord('?').

%-------------------------------------------------------------
% read_sentence_pc(-Sentence)
%-------------------------------------------------------------

read_sentence_pc([FirstWord|RestOfSentence]) :-
  readSentence_pc([FirstWord|RestOfSentence]).

readSentence_pc([FirstWord|RestOfSentence]) :-
  get0(Char),
  readWord_pc(Char,FirstWord,NextChar),
  readRestOfSentence_pc(FirstWord,NextChar,RestOfSentence).

   %--- ancillaries to read_sentence_pc -------------------------
   readRestOfSentence_pc(Word,_,[]) :-
     endOfSentenceWord(Word),!.
   readRestOfSentence_pc(_,Char,[NextWord|RestOfSentence]) :-
     readWord_pc(Char,NextWord,NextChar),
     readRestOfSentence_pc(NextWord,NextChar,RestOfSentence).

   readWord_pc(Char,Word,NextChar) :-
     singleCharWord(Char),!,name(Word,[Char]),get0(NextChar).
   readWord_pc(Char,Word,NextChar) :-
     componentChar_pc(Char,NewChar),
     !,
     get0(TempNextChar),
     restWord_pc(TempNextChar,RestWord,NextChar),
     name(Word,[NewChar|RestWord]).
   readWord_pc(_,Word,NextChar) :-
     get0(TempChar),
     readWord_pc(TempChar,Word,NextChar).

   restWord_pc(Char,[NewChar|RestWord],NextChar) :-
     componentChar_pc(Char,NewChar),
     !,
     get0(TempNextChar),
     restWord_pc(TempNextChar,RestWord,NextChar).
     restWord_pc(Char,[],Char).

   componentChar_pc(Char,Char) :- Char>96,Char<123.

   componentChar_pc(Char,Char) :- Char>64,Char<91.

   componentChar_pc(Char,L) :- Char>64,Char<91,L is Char+32.
   componentChar_pc(Char,Char) :- Char>47,Char<58.
   componentChar_pc(39,39).  /* ' */
   componentChar_pc(45,45).  /* - */
   componentChar_pc(95,95).  /* _ */

%-------------------------------------------------------------
% write_sentence(+Sentence)
%-------------------------------------------------------------

write_sentence([F|R]) :-
   write(F),
   write_rest_of_sentence(R).

   %--- ancillaries to write_sentence ------------------------
   write_rest_of_sentence([F|R]) :-
     write(' '),
     write(F),
     write_rest_of_sentence(R).
   write_rest_of_sentence([]).

%-------------------------------------------------------------
% space/0
%-------------------------------------------------------------

space :- write(' ').

%-------------------------------------------------------------
% read_string(-String)
%-------------------------------------------------------------

read_string(S) :-
   get0(C),
   (
      C == -1,  S = [], !, fail;
      C == 10,  S = [], ! ;
      C == 32, !, read_string(S);
      !, read_string(C,S)
   ).

read_string(C,[C|Cs]) :-
   get0(D),
   (
      D == -1,  Cs = [], !, fail;
      D == 10,  Cs = [], ! ;
      D == 32,  Cs = [], ! ;
      !, read_string(D,Cs)
   ).


%-------------------------------------------------------------
% write_string(+String)
%-------------------------------------------------------------

write_string([]) :- !.
write_string([C|Cs]) :- put(C), write_string(Cs).
altair - kfosmire - 03 > cat process.pl
% File:  process.p
%      - processing predicates

:- consult('io.p').

butlast([_],[]).
butlast([X|Xs],[X|Ys]) :-
  butlast(Xs,Ys).

doit(F) :-
   seeing(Keyboard),
   see(F),
   cvt,
   see(Keyboard).

cvt :- 
  read_sentence(Sentence),
  butlast(Sentence,Sentenc),
  Sentenc \== [quit],
  write_sentence(Sentenc), !,
  (
     phrase(calculate(Value),Sentenc,[]),
     write(Value);
     write_string(" -- translation failed")
  ),
  nl,
  cvt.

cvt.altair - kfosmire - 03 > exit
exit
Script done, file is partb.txt
altair - kfosmire - 03 > exit
exit

script done on Tue Apr 22 11:29:58 2014
